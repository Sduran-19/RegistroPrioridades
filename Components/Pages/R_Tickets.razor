@page "/Ticket"
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject TicketsService TicketsService


<EditForm Model="Ticket" OnValidSubmit="Crear">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Tickets.</h3>
            </div>
            <div class=card-body>

                @*Ticket Id:*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Ticket Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Ticket.TicketId" class="form-control"  />
                        
                    </div>
                </div>

                @*Fecha:*@
                <div class="mb-3">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="Ticket.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => Ticket.Fecha)" />
                </div>

                @*Cliente Id:*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Cliente Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Ticket.ClienteId" class="form-control"  />
                      
                    </div>
                </div>

                @*Sistema Id:*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Sistema Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Ticket.SistemaId" class="form-control" />
                    </div>
                </div>

                @*Prioridad Id:*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Prioridad Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Ticket.PrioridadId" class="form-control" />
                    </div>
                </div>

                @*SolicitadoPor*@
                <div class="mb-3">
                    <label class="form-label" for="SolicitadoPor">SolicitadoPor:</label>
                    <InputText @bind-Value="Ticket.SolicitadoPor" class="form-control" />
                    <ValidationMessage For="@(() => Ticket.SolicitadoPor)" />
                </div>

                @*Asunto*@
                <div class="mb-3">
                    <label class="form-label" for="Asunto">Asunto:</label>
                    <InputText @bind-Value="Ticket.Asunto" class="form-control" />
                    <ValidationMessage For="@(() => Ticket.Asunto)" />
                </div>

                @*Descripcion*@
                <div class="mb-3">
                    <label class="form-label" for="Descripcion">Descripcion:</label>
                    <InputText @bind-Value="Ticket.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => Ticket.Descripcion)" />
                </div>

            </div>
            <div class="card-footer d-flex justify-content-between">
                <div class="btn-group">
                    <button type="submit" class="btn btn-outline-success">Crear <i class="oi oi-document" /></button>
                </div>
                <div class="ms-auto"></div>
            </div>


            </div>
        </div>
   


</EditForm>



@code {

    [Parameter]

    public int TicketId { get; set; }

    public Tickets Ticket { get; set; } = new Tickets();

    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if(TicketId>0)
        {
            this.Ticket.TicketId = TicketId;
            await Crear();
        }
    }
   
    public async Task Crear()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Tickets", Ticket);
        if (!response.IsSuccessStatusCode)
        {
            Mensaje = response.ReasonPhrase ?? "error";
            return;
        }
        var ticketDevuelto = await response.Content.ReadFromJsonAsync<Tickets>();
        if (ticketDevuelto is not null)
        {
            Ticket = ticketDevuelto;
            StateHasChanged();
        }


    }


}
