@page "/Prioridades"
@rendermode InteractiveServer
@inject HttpClient httpClient
@inject PrioridadesService PrioridadesService

<EditForm Model="prioridades" OnValidSubmit="Crear">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Prioridades.</h3>  
            </div>
            <div class=card-body>

                @*Prioridades Id:*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Prioridad Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="prioridades.PrioridadId" class="form-control" />
                    </div>
                </div>

                @*Descripcion*@
                <div class="mb-3">
                    <label class="form-label" for="Descripcion">Descripcion:</label>
                    <InputText @bind-Value="prioridades.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => prioridades.Descripcion)" />
                </div>


              
                @*Dias de Compromiso*@
                <div class="mb-3">
                    <label class="form-label" for="Dias de Compromiso">Dias de Compromiso:</label>
                    <InputNumber @bind-Value="prioridades.DiasCompromiso" class="form-control" />
                    <ValidationMessage For="@(() => prioridades.DiasCompromiso)" />
                </div>


            </div>
            <div class="card-footer d-flex justify-content-between">
                <div class="btn-group">
                    <button type="submit" class="btn btn-outline-success">Crear <i class="oi oi-document" /></button>
                </div>
                <div class="ms-auto"></div>
            </div>
            </div>
        </div>
    


</EditForm>



@code {

    [Parameter]
   
    public int PrioridadId { get; set; }

    public Prioridades prioridades { get; set; } = new Prioridades();

    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadId > 0)
        {
            this.prioridades.PrioridadId = PrioridadId;
            await Crear();
        }
    }

    public async Task Crear()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Prioridad", prioridades);
        if (!response.IsSuccessStatusCode)
        {
            Mensaje = response.ReasonPhrase ?? "error";
            return;
        }
        var PrioridadesDevuelto = await response.Content.ReadFromJsonAsync<Prioridades>();
        if (PrioridadesDevuelto is not null)
        {
            prioridades = PrioridadesDevuelto;
            StateHasChanged();
        }


    }
}
